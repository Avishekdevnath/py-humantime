Hereâ€™s a complete **Cursor AI-compatible code structure and prompt** for building **`py-humantime`** as both a **CLI tool** and a **reusable Python module**, with clean and extendable code design.

---

### ðŸ§© Directory Structure

```
py-humantime/
â”œâ”€â”€ pyhumantime/
â”‚   â”œâ”€â”€ __init__.py
â”‚   â”œâ”€â”€ core.py           # Conversion logic
â”‚   â”œâ”€â”€ cli.py            # CLI interface
â”œâ”€â”€ pyproject.toml
â”œâ”€â”€ README.md
```

---

### ðŸ§  **Prompt for Cursor AI**

> ðŸ“¦ Create a Python package called `py-humantime` that provides both a **command-line tool** and a **Python module** to convert between seconds and human-readable time strings.
>
> âœ… Requirements:
>
> * Pure Python, no external dependencies.
> * Create a reusable API:
>
>   * `seconds_to_human(seconds: int) -> str`
>   * `human_to_seconds(human_time: str) -> int`
> * Create CLI options:
>
>   * `--to-human <seconds>`
>   * `--to-seconds "<string>"`
> * Include validation and helpful error messages.
> * Package should be easily **extendable** (e.g., for milliseconds or natural language).
> * Use `argparse` for CLI parsing.

---

### âœ… `core.py` (logic module)

```python
import re

def seconds_to_human(seconds: int) -> str:
    h = seconds // 3600
    m = (seconds % 3600) // 60
    s = seconds % 60
    parts = []
    if h > 0:
        parts.append(f"{h}h")
    if m > 0:
        parts.append(f"{m}m")
    if s > 0 or not parts:
        parts.append(f"{s}s")
    return " ".join(parts)

def human_to_seconds(human_time: str) -> int:
    pattern = r"(?:(\d+)h)?\s*(?:(\d+)m)?\s*(?:(\d+)s)?"
    match = re.fullmatch(pattern, human_time.strip())
    if not match:
        raise ValueError(f"Invalid time string: '{human_time}'")
    h, m, s = match.groups(default="0")
    return int(h) * 3600 + int(m) * 60 + int(s)
```

---

### âœ… `cli.py` (CLI tool)

```python
import argparse
import sys
from pyhumantime.core import seconds_to_human, human_to_seconds

def main():
    parser = argparse.ArgumentParser(
        description="Convert between seconds and human-readable time."
    )
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--to-human', type=int, help='Convert seconds to human-readable time')
    group.add_argument('--to-seconds', type=str, help='Convert human-readable time to seconds')

    args = parser.parse_args()

    try:
        if args.to_human is not None:
            print(seconds_to_human(args.to_human))
        elif args.to_seconds is not None:
            print(human_to_seconds(args.to_seconds))
    except ValueError as e:
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)

if __name__ == '__main__':
    main()
```

---

### âœ… `__init__.py`

```python
from .core import seconds_to_human, human_to_seconds
```

---

### âœ… `pyproject.toml` (minimal)

```toml
[project]
name = "py-humantime"
version = "0.1.0"
description = "Convert between seconds and human-readable time in CLI or code."
authors = [{ name = "Your Name", email = "you@example.com" }]
dependencies = []
requires-python = ">=3.7"

[project.scripts]
py-humantime = "pyhumantime.cli:main"
```

---

### âœ… Example Usage

#### CLI:

```bash
py-humantime --to-human 4523        # â†’ 1h 15m 23s
py-humantime --to-seconds "1h 15m"  # â†’ 4500
```

#### Python:

```python
from pyhumantime import seconds_to_human, human_to_seconds

print(seconds_to_human(4523))          # â†’ '1h 15m 23s'
print(human_to_seconds("1h 15m 23s"))  # â†’ 4523
```

---

Would you like this zipped or initialized in a GitHub-ready scaffold with tests and README?
